CLASS
___________________________________________________________________________________________________________________

FUNDAMENTALS:

	Class is a template for an object, and an object is an instance of a class. It defines a new type of data

	Instance variables: The data, or variables, defined within a class.	Each instance of the class contains its own
	copy of these variables. Changes to the instance variables of one object have no effect on the instance variables 
	of another.
	Methods: The code is contained within methods.
	Collectively, the methods and variables defined within a class are called members of the class.

	Note: 
		- Applets, don’t require a main( ) method at all.
		- Although commonly referred to as the dot operator, the formal specification for Java categorizes the . as
		  a separator. Changes to the instance variables of one object have no effect on the instance variables of 
		  another.
_____________________________________________________________________________________________________________________

DECLARING OBJECTS:

	- The new operator dynamically allocates (that is, allocates at run time) memory for an object and returns a 
	reference to it.
		Example:
			Box mybox; // declare reference to object
			mybox = new Box(); // allocate a Box object
	- A constructor defines what occurs when an object of a class is created.
	- Java’s primitive types are not implemented as objects. Rather, they are implemented as “normal” variables.
_____________________________________________________________________________________________________________________
	
ASSIGNING REFERENCE VARIABLE:

	- Example:
			Box b1 = new Box();
			Box b2 = b1;
	  Here b1 and b2 will both refer to the same object. Changes made to the object through b2 will affect the object 
	  to which b1 is referring, since they are the same object.
	  		// ...
	  		b1 = null;
	  Here, b1 has been set to null, but b2 still points to the original object.
____________________________________________________________________________________________________________________

ADDING METHODS:

	Syntax:
		type name(parameter-list) {
		// body of method
		}

	Note 1:
	- A parameter is a variable defined by a method that receives a value when the method is called.
	- An argument is a value that is passed to a method when it is invoked.

	Note 2:
	- In well-designed Java programs, instance variables should be accessed only through methods defined by their
	  class.
______________________________________________________________________________________________________________________

CONSTRUCTORS:

	- A constructor initializes an object immediately upon creation. 
	- has the same name as the class in which it resides and is syntactically similar to a method. 
	- The constructor is automatically called when the object is created, before the new operator completes. 
	- Constructors have no return type, not even void because the implicit return type of a class’ constructor is the 
	  class type itself.
_______________________________________________________________________________________________________________________

THE this KEYWORD:

	- this is always a reference to the object on which the method was invoked.
	Use:
	- Avoid Instance Variable Hiding
	i.e.when a local variable has the same name as an instance variable, the local variable hides the instance variable.

	Example:
		// Use this to resolve name-space collisions.
		Box(double width, double height, double depth) {
		this.width = width;
		this.height = height;
		this.depth = depth;
		}
________________________________________________________________________________________________________________________

GARBAGE COLLECTION:

	- Java handles deallocation through garbage collection.
_________________________________________________________________________________________________________________________

THE finalize() METHOD:

	- By using finalization, you can define specific actions that will occur when an object is just about to be reclaimed
	  by the garbage collector.
	- It is not called when an object goes out-of-scope, for example. This means that you cannot know when—or even 
	  if—finalize( ) will be executed.
	-Syntax:
		protected void finalize( )
		{
		// finalization code here
		}

													X-------------X