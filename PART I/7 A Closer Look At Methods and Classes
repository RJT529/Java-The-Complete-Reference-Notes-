OVERLOADING METHODS

	- overloaded methods must differ in the type and/or number of their parameters.								|
	- the return type alone is insufficient to distinguish two versions of a method.
	- In some cases, Java’s automatic type conversions (only if no exact match is found)can play a role in 
	  overload resolution.
	- Overloading Constructors :

_________________________________________________________________________________________________________________

USING OBJECTS AS PARAMETERS

	- Example-
			// return true if o is equal to the invoking object
			boolean equalTo(Test o) {
			if(o.a == a && o.b == b) return true;
			else return false;
			}
			.
			.
			ob1.equalTo(ob2) // invokes equalTo() and checks for the equality of ob1 and ob2 objects.

	- also used in building copy constructors

_________________________________________________________________________________________________________________

ARGUMENT PASSING
	
		1. call-by-value: 
			-changes made to the parameter of the subroutine have no effect on the argument.
			-When you pass a primitive type to a method, it is passed by value

		2. call-by-reference: 
			-changes made to the parameter will affect the argument used to call the subroutine as a reference to 
			an argument is passed to the paramater.
			Note: 
				When an object reference is passed to a method, the reference itself is passed by use of
			call-by-value. However, since the value being passed refers to an object, the copy of that value will
			still refer to the same object that its corresponding argument does.
_________________________________________________________________________________________________________________

ACCESS CONTROL

	- Java’s access modifiers are public, private, and protected.
	- Protected : applies only when inheritance is involved
	- Public : member can be accessed by any other code.
	- Private: member can only be accessed by other members of its class.

	Note: When no access modifier is used, then by default the member of a class is public within its own package,
	 but cannot be accessed outside of its package.
_________________________________________________________________________________________________________________

UNDERSTANDING static

	- When a member is declared static, it can be accessed before any objects of its class are created, and 
	  without reference to any object.

	- Instance variables declared as static:
		> essentially, global variables
		> When objects of its class are declared, no copy of a static variable is made.
		> all instances of the class share the same static variable.

	- Methods declared as static:
		> They can only directly call other static methods.
		> They can only directly access static data.
		> They cannot refer to this or super in any way. 

	- If you need to do computation in order to initialize your static variables, you can declare a static block
	  that gets executed exactly once, when the class is first loaded.

	- Outside of the class in which they are defined, static methods and variables can be used independently of 
	  any object. To do so, you need only specify the name of their class followed by the dot operator.
_________________________________________________________________________________________________________________

INTRODUCING final

	- A field can be declared as final. Doing so prevents its contents from being modified, making it, 
	essentially, a constant. This means that you must initialize a final field when it is declared.
	- In addition to fields, both method parameters and local variables can be declared final
	- final can also be applied to methods. If you make any method as final, you cannot override it.
	-If you make any class as final, you cannot extend it.

_________________________________________________________________________________________________________________

INTRODUCING NESTED AND INNER CLASSES

	- if class B is defined within class A, then B does not exist independently of A.
	- A nested class has access to the members, including private members, of the class in which it is nested. 
	  However, the enclosing class does not have access to the members of the nested class.

	- two types of nested classes:
		1. static: it must access the non-static members of its enclosing class through an object.
		2. non-static: also called the inner class.It has access to all of the variables and methods of its outer 
		class and may refer to them directly

	- helpful when handling events.
_________________________________________________________________________________________________________________

EXPLORING THE String CLASS
	
	- Even string constants are actually String objects.
	- objects of type String are immutable. But Java defines peer classes of String, called StringBuffer and 
	  StringBuilder, which allow strings to be altered, so all of the normal string manipulations are still 
	  available in Java.
	- create a String Ex:-
			String myString = "this is a test";
	- '+' is used to concatenate two strings.
	-Methods defined on String:
		- equals( ) : test for the equality of two strings
		- length()
		- charAt()
	- Array of String :
			String str[] = { "one", "two", "three" };

_________________________________________________________________________________________________________________

Varargs: VARIABLE LENGTH ARGUMENTS

	- A variable-length argument is specified by three periods (...)
	- Ex- 
		static void vaTest(int ... v) {
			System.out.print("Number of args: " + v.length + " Contents: ");

			for(int x : v)
				System.out.print(x + " ");
			System.out.println();

		}
	- Note the use of for loop in the above function
	- A method can have “normal” parameters along with a variable-length parameter. However, the variable-length 
	parameter must be the last parameter declared by the method.
	- there must be only one varargs parameter.
	
_________________________________________________________________________________________________________________
_________________________________________________________________________________________________________________
_________________________________________________________________________________________________________________
